#!/bin/sh

DJANGO_ROOT='/var/django'
VIRTUALENV_ROOT="$DJANGO_ROOT/.virtualenvs"
MINSPARE=4
MAXSPARE=32
MAXCHILDREN=32
MAXREQUESTS=100
DIETIME=3
METHOD=prefork
RUN_DIR="/var/run/django"
FASTCGI_USER="www-data"

[ -e /etc/flint.conf ] && . /etc/flint.conf;

VERSION_STR="flint 1.1.3"

is_root_or_die() {
	if [ $(id -u) != "0" ]; then
		echo "You must be root to run this command."
		exit 1
	fi
}

is_project_or_die() {
	if [ "$project_name" = "" ]; then
		echo "Specify a project name."
		exit 1
	fi
	project_name=$1
	project="$DJANGO_ROOT/$project_name"
	if [ ! -d $project ]; then
		echo "Error: $project_name is not a valid Django project."
		exit 1
	fi
}

is_running() {
	pidfile=$1
	project=$2
	virtualenv=$3
	[ ! -f "$pidfile" ] && return 1

	pid=`cat $pidfile`

	[ ! -d "/proc/$pid" ] && return 1

    cmd=`cat /proc/$pid/cmdline | tr '\0' ' ' | grep -c "$virtualenv/bin/python $project/manage.py"`;
	[ $cmd -eq 1 ] && return 0 || return 1
}

status() {
	project_name=$1
	is_project_or_die $project_name

	virtualenv="$VIRTUALENV_ROOT/$project_name"
	project="$DJANGO_ROOT/$project_name"
	socket="$RUN_DIR/$project_name-fastcgi.sock"
	pidfile="$RUN_DIR/$project_name.pid"

	echo -n " * Checking status of FastCGI for $project_name... "

	if is_running "$pidfile" "$project" "$virtualenv"; then
		echo "running."
		return 0
	else
		echo "not running"
		return 1
	fi
}

start() {
	is_root_or_die
	project_name=$1
	is_project_or_die $project_name

	virtualenv="$VIRTUALENV_ROOT/$project_name"
	project="$DJANGO_ROOT/$project_name"
	socket="$RUN_DIR/$project_name-fastcgi.sock"
	pidfile="$RUN_DIR/$project_name.pid"

	if [ ! -d $RUN_DIR ]; then
		mkdir $RUN_DIR
	fi
		
	chown $FASTCGI_USER $RUN_DIR

	echo -n " * Starting FastCGI for $project_name... "
	if is_running "$pidfile" "$project" "$virtualenv"; then
		echo "Already running. Not doing anything."
		return 0
	fi

	su $FASTCGI_USER -c "$virtualenv/bin/python $project/manage.py runfcgi socket=$socket pidfile=$pidfile minspare=$MINSPARE maxspare=$MAXSPARE maxchildren=$MAXCHILDREN maxrequests=$MAXREQUESTS method=$METHOD daemonize=true" && echo OK || echo Failed
	return $?
}

stop() {
	is_root_or_die
	project_name=$1
	is_project_or_die $project_name

	socket="$RUN_DIR/$project_name-fastcgi.sock"
	pidfile="$RUN_DIR/$project_name.pid"
	virtualenv="$VIRTUALENV_ROOT/$project_name"
	project="$DJANGO_ROOT/$project_name"

	echo -n " * Stopping FastCGI for $project_name... "

	if is_running "$pidfile" "$project" "$virtualenv"; then
		kill `cat $pidfile`
		status=$?
		rm $pidfile
		rm $socket

		[ $status -eq 0 ] && echo "OK" || echo "Failed"
		return $status
	else
		echo "Already stopped"
		return 0
	fi
}

restart_dead_project() {
	is_root_or_die
	project_name=$1
	is_project_or_die $project_name

	pidfile="$RUN_DIR/$project_name.pid"
	virtualenv="$VIRTUALENV_ROOT/$project_name"
	project="$DJANGO_ROOT/$project_name"

	echo -n " * Starting FastCGI for $project_name... "
	if is_running "$pidfile" "$project" "$virtualenv"; then
		echo "Already running. Doing nothing."
		return 0
	else
		echo "No PID file for $project_name. Restarting."
		start $project_name
		return $?
	fi
}

restart_dead() {
	is_root_or_die
	errors=0
	for project in `ls $DJANGO_ROOT`; do
		restart_dead_project $project
		[ ! $? -eq 0 ] && errors=$((errors+1))
	done
	
	return $errors
}

start_all() {
	is_root_or_die
	errors=0
	for project in `ls $DJANGO_ROOT`; do
		start $project
		[ ! $? -eq 0 ] && errors=$((errors+1))
	done
	
	return $errors
}

stop_all() {
	is_root_or_die
	errors=0
	for project in `ls $DJANGO_ROOT`; do
		stop $project
		[ ! $? -eq 0 ] && errors=$((errors+1))
	done
	
	return $errors
}

status_all() {
	errors=0
	for project in `ls $DJANGO_ROOT`; do
		status $project
		[ ! $? -eq 0 ] && errors=$((errors+1))
	done

	return $errors
}

errcode=0
case "$1" in
	start_all)
		start_all
		errcode=$?
	;;
	stop_all)
		stop_all
		errcode=$?
	;;
	restart_all)
		stop_all
		errcode=$?
		[ ! -z "$DIETIME" ] && sleep $DIETIME
		start_all
		[ $errcode -eq 0 ] && errcode=$?
	;;

	start)
		start $2
		errcode=$?
	;;
	stop)
		stop $2
		errcode=$?
	;;
	restart)
		stop $2
		errcode=$?
		[ ! -z "$DIETIME" ] && sleep $DIETIME
		start $2
		[ $errcode -eq 0 ] && errcode=$?
	;;
	restart_dead)
		restart_dead
		errcode=$?
	;;
	status_all)
		status_all
		errcode=$?
	;;

	-V)
		echo $VERSION_STR
	;;
	--version)
		echo $VERSION_STR
	;;
	*)
		echo "Usage: flint {start|stop|restart} projectname"
		echo "       flint {start_all|stop_all|restart_all|restart_dead|status_all}"
		echo "       flint {--version|-V}"
		exit 1
	;;
esac
exit $errcode

